import { Document, Model, model, Schema } from "mongoose";
import { config } from "../config";
import { addJudgeTask } from "../redis";
import { validateFiles, validateProblem, validateUser } from "../utils";
import { Problem } from "./problem";

export enum SolutionResult {
    WaitingJudge,       // Wating Judge
    Judging,            // Judging
    Skipped,            // Skipped
    Accepted,           // Accepted
    WrongAnswer,        // Wrong Answer
    TimeLimitError,     // Time Limit Error
    MemoryLimitError,   // Memory Limit Error
    RuntimeError,       // Runtime Error
    CompileError,       // Compile Error
    PresentationError,  // Presentation Error
    JudgementFailed,    // Judgement Failed (Judge program error)
    SystemError,        // System Error     (Judge framwork & Judge plugin error)
    OtherError,         // Other Error
}

export interface ISolutionModel extends Document {
    ownerID: string;
    problemID: string;
    fileIDs: string[];
    status: SolutionResult;
    score: number;
    log?: string;
    contestID: string;

    created: Date;
    allowedRead: string[];
    allowedRejudge: string[];
    allowedModify: string[];
    judge(): Promise<void>;
}

export let SolutionSchema: Schema = new Schema(
    {
        ownerID: {
            type: String,
            required: true,
            validate: validateUser,
        },
        // Readonly - auto generated by system
        problemID: {
            type: String,
            required: true,
            validate: validateProblem,
        },
        fileIDs: {
            type: [String],
            required: true,
            validate: validateFiles,
        },
        status: {
            type: Number,
            required: true,
            default: SolutionResult.WaitingJudge,
            min: 0,
            max: 12,
        },
        score: {
            type: Number,
            required: true,
            default: 0,
            min: 0,
            max: 100,
        },
        // Readonly - auto generated by system
        contestID: {
            type: String,
            required: true,
        },
        log: String,
        created: Date,
        allowedRead: {
            type: [String],
            required: true,
            default: config.defaults.solution.allowedRead,
            index: true,
        },
        allowedRejudge: {
            type: [String],
            required: true,
            default: config.defaults.solution.allowedRejudge,
            index: true,
        },
        allowedModify: {
            type: [String],
            required: true,
            default: config.defaults.solution.allowedModify,
            index: true,
        },
    },
);

SolutionSchema.methods.judge = async function() {
    const self = this as ISolutionModel;
    const channel = (await Problem.findById(self.problemID).select("channel")).channel;
    if (!channel) { return; }
    return addJudgeTask(self.id, channel);
};

SolutionSchema.pre("save", function(next) {
    const This = this as ISolutionModel;
    if (!This.created) {
        This.created = new Date();
    }
    next();
});

export const Solution: Model<ISolutionModel> = model<ISolutionModel>("Solution", SolutionSchema);
